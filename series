#!/usr/bin/env python3 #-m cProfile -s tottime

#
# Generate recursive series and see if they either:
# - Have a closed form
# - Are listed in OEIS
# - Might be an interesting yet undocumented series
#

import math

from equation import generate, evaluate, stringify
from util import cache, fetch_json, find_rational
import number

def evaluate_series(eq, iterations, initial):
    value = initial
    for i in range(iterations):
        index = iterations - i - 1
        value = evaluate(eq, { 'N': number.create(index), 'R': value })
        if value is None:
            break
    return value

def eq_find(target, max_size, min_diff = 1e-12):
    for size in range(1, max_size + 1):
        for eq, sim in generate(size):
            value = sim[0]
            if abs(value - target) < min_diff:
                return (value, eq)

def oeis_fetch(digits):
    query = ','.join([char for char in digits])
    url = f'https://oeis.org/search?fmt=json&q={query}'
    return fetch_json(url)

def count_a(eq, counts):
    counts[eq[0]] = counts.get(eq[0], 0) + 1
    for e in eq[1:]:
        count_a(e, counts)

def count(eq):
    counts = {}
    count_a(eq, counts)
    return counts

if __name__ == '__main__':
    iterations = 100
    initial = number.create(1)
    min_diff = 1e-12
    max_value = 1e5
    find_max_size = 8
    lookup_digits = 10
    search_fraction = True
    search_equation = True
    search_oeis = True
    skip_dupes = True
    ops = { '+', '-', '*', '/', '^', 'root' }

    lookup = set()
    for size in range(1, 10):
        for eq1, sim in generate(size, ops = ops, vars = ['N', 'R']):
            counts = count(eq1)
            if counts.get('N') == None or counts.get('R') != 1:
                continue
            is_series = 'is_series' if (eq1[0] == '+' or eq1[0] == '*' or eq1[0] == '/') and eq1[1][0] == 'R' else ''
            value0 = evaluate_series(sim, iterations - 1, initial)
            if value0 is None:
                # print(f'skip: {stringify(eq1)} = NaN')
                continue
            if value0 > max_value or value0 < -max_value:
                # print(f'skip: {stringify(eq1)} = {value0} out of bounds')
                continue
            if value0 == 0.0:
                # print(f'skip: {stringify(eq1)} is zero')
                continue
            if value0 < 1 / max_value and value0 > -1 / max_value:
                # print(f'skip: {stringify(eq1)} = {value0} approaching zero')
                continue
            value1 = evaluate_series(sim, iterations, initial)
            if value1 is None:
                # print(f'skip: {stringify(eq1)} = NaN')
                continue
            if abs(value0 - value1) > min_diff:
                digits = -math.log10(abs(value0 - value1))
                if digits > 6:
                    print(f'skip: {stringify(eq1)} not converging, digits: {digits:.1f} {is_series}')
                continue
            key = str(number.remainder(value1))[2:2 + lookup_digits]
            if skip_dupes and len(key) == lookup_digits:
                if key in lookup:
                    # print(f'skip: {stringify(eq1)} = {value1} value already tested')
                    continue
                lookup.add(key)
            conv = round(-math.log10(abs(value0 - value1))) if value0 != value1 else 16
            if search_fraction:
                fraction = find_rational(value1)
                if fraction:
                    a, b = fraction
                    digits = round(-math.log10(abs(value1 - a / b))) if value1 != a / b else 16
                    if is_series and not number.is_integer(value1):
                        print(f'found frac: {stringify(eq1)} = {a}/{b} = {value1} conv:{conv} digits:{digits} {is_series}')
                    continue
            if search_equation:
                find = cache(eq_find, (value1, find_max_size), 'find')
                if find:
                    value2, eq2 = find
                    digits = round(-math.log10(abs(value1 - value2))) if value1 != value2 else 16
                    contains = ', '.join(sorted([v for v in count(eq2) if not isinstance(v, int) and v not in {'*', '/', '+', '-', 'R', 'N'}]))
                    print(f'found equation: {stringify(eq1)} = {stringify(eq2)} = {value1} conv:{conv} digits:{digits} has: {contains}, {is_series}')
                    continue
            if search_oeis and len(key) == lookup_digits:
                oeis = cache(oeis_fetch, (key, ), 'oeis')
                oeis_count = oeis['count']
                if oeis_count > 0:
                    print(f'found oeis: {stringify(eq1)} = {value1} conv:{conv} oeis:{oeis_count} {is_series}')
                    for result in oeis['results']:
                        oeis_digits = result['data'].replace(',', '')
                        offset = int(result['offset'].split(',')[0])
                        oeis_value = number.create(oeis_digits[0:offset] + '.' + oeis_digits[offset:])
                        digits = round(-math.log10(abs(value1 - oeis_value))) if value1 != oeis_value else 16
                        print(f'- {result["name"]} digits: {digits}')
                    continue
            if is_series:
                print(f'found nothing: {stringify(eq1)} = {value1} conv:{conv} {is_series}')
