#!/usr/bin/env python3 #-m cProfile -s tottime

#
# Lists generated equations that have the same result. This can be used to find
# potential optimizations in the equation generator. Reducing collisions will
# reduce the number of equations for a given size, allowing the equation search
# to explore further in the same amount of time.
#
# Use in conjunction with the coverage script.
#
# Consider setting custom precision (e.g. 20) in number.py to get better results.
#

import math # https://docs.python.org/3/library/math.html
import sys

from equation import generate_0, generate_1, generate_2, default_ops, stringify
from util import lookup_add

def generate_collision(size, lookup, digits):
    if size == 1:
        yield from generate_0(default_ops, [])
    else:
        for eq, sim in generate_collision(size - 1, lookup, digits):
            if lookup_add(lookup, eq, sim[0], digits):
                continue
            yield from generate_1(eq, sim, default_ops)
        for size1 in range(1, size - 1):
            for eq1, sim1 in generate_collision(size1, lookup, digits):
                if lookup_add(lookup, eq1, sim1[0], digits):
                    continue
                for eq2, sim2 in generate_collision(size - size1 - 1, lookup, digits):
                    if lookup_add(lookup, eq2, sim2[0], digits):
                        continue
                    yield from generate_2(eq1, sim1, eq2, sim2, default_ops)

if __name__ == '__main__':
    limit = 100
    max_size = 5
    digits = 12

    lookup = {}
    for size in range(1, max_size + 1):
        found = 0
        total = 0
        for eq, sim in generate_collision(size, {}, digits):
            collision = lookup_add(lookup, eq, sim[0], digits)
            if collision:
                if found < limit:
                    print(f'collision: {stringify(eq)} = {stringify(collision)}')
                found += 1
            total += 1
        if found > limit:
            print('..')
        print(f'size: {size} found: {found}/{total}')
